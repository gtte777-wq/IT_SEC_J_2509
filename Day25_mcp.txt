서버 돌리는 명령어 : npm run dev

ipconfig, env. index.ts, data-source1 가져 오기. 초기 셋팅

npm install -g @google/gemini-cli@latest
- gemini cli

npm create hono@latest itsec_hono_2509
- nodejs hono 서버 생성 명령어
- my-app 이걸 내가 원하는 이름으로

npm i cross-env dotenv pg reflect-metadata rimraf typeorm zod
- DB연결하기 위한 관련파일 설치

typeorm-model-generator -h 뭐뭐 -d neondb -u neondb_owner -x 뭐뭐 -e postgres -o ./src --ssl
- model generator 돌리기
- DB를 객체로 만들어서 데이터 송수신 편하게 만들기
typeorm-model-generator -h ep-still-boat-ad6iauih-pooler.c-2.us-east-1.aws.neon.tech -d neondb -u neondb_owner -x npg_iOu8HF1WEQZM -e postgres -o ./src --ssl

gemini CLI Companion

gemini
mycommand.md


트랜젝션 생쿼리 (Delete)

// TypeORM의 transaction을 사용하여 데이터베이스 작업을 묶습니다.
    const deleteResult = await AppDataSource.manager.transaction(async (transactionalEntityManager) => {
        // Raw SQL 쿼리를 사용하여 데이터 삭제
        // transactionalEntityManager를 사용하여 트랜잭션 내에서 쿼리 실행
        const rawDeleteResult = await transactionalEntityManager.query(
            `DELETE FROM t_board WHERE id = ?`,
            [id] // 쿼리 파라미터를 배열로 전달하여 SQL Injection 방지
        );

        // 여기서는 삭제 작업만 있으므로 추가적인 복잡한 로직은 없습니다.
        // 만약 관련 테이블의 데이터도 삭제해야 한다면 이 블록 내에서 실행하면 됩니다.

        return rawDeleteResult;
    });